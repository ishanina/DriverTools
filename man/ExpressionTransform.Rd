% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/Transformation.R
\name{ExpressionTransform}
\alias{ExpressionTransform}
\title{Transforms a string to get an expression for the complement set.}
\usage{
ExpressionTransform(string)
}
\arguments{
\item{string}{}
}
\value{
a simplified string representing the complement set
}
\description{
Transforms a string to get an expression for the complement set.
}
\details{
This function switches the + operator into multiplication and vice versa.
 The function should run in linear time with the length of the input string.

For expressions that are factored like this one, this algorithm is much faster\cr
\code{system.time(print(Display(Simplify(parser(}\cr
\code{ExpressionTransform("A(B + C)D + C(D+E(F+C))AG")))))) #0.01 seconds}\cr\cr
\code{system.time(print(Display(}\cr
\code{Transform(parser("A(B + C)D + C(D+E(F+C))AG"))))) #0.26 seconds}

For expressions that are expanded out like this one, the algorithm is somewhat slower
\code{system.time(Display(Simplify(parser(}\cr
\code{ExpressionTransform("ABC + DEF + GHI + JKL + MNO + PQR"))))) #39.42 seconds}\cr\cr
\code{system.time(Display(}\cr
\code{Transform(parser("ABC + DEF + GHI + JKL + MNO + PQR")))) #38.02 seconds}

However it is slower because of the parser, which expands out the expression.
The factored expression is obtained much more quickly\cr
\code{system.time(print(}\cr
\code{ExpressionTransform("ABC + DEF + GHI + JKL + MNO + PQR"))) #0 seconds}\cr
[1] "(A+B+C)(D+E+F)(G+H+I)(J+K+L)(M+N+O)(P+Q+R)"
}

